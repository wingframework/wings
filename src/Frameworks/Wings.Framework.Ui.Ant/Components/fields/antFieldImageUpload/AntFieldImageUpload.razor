@namespace Wings.Framework.Ui.Ant.Components
@typeparam TModel
@inherits AntFieldImageUploadBase<TModel>
@inject MessageService _message
<Row Gutter="16">
    <AntDesign.Col Class="gutter-row" Span="6">
        @FieldLabel
    </AntDesign.Col>
    <AntDesign.Col Class="gutter-row" Span="12">
        @if (formFieldAttribute != null && formFieldAttribute.Edit == false)
        {
            @Property.GetValue(Value)
        }
        else
        {
        <Upload Action="/api/common/upload"
                Name="avatar"
                        FileList="fileList"

                Class="avatar-uploader"
                ListType="picture-card"
                ShowUploadList="false"
                BeforeUpload="BeforeUpload"
                OnChange="HandleChange">
            @if (!string.IsNullOrWhiteSpace(imageUrl))
            {
                <img src="@imageUrl" alt="avatar" style="width: 100%" />
            }
            else
            {
                <div>
                    <Icon Spin="loading" Type="@(loading?"Loading":"plus")"></Icon>
                    <div className="ant-upload-text">Upload</div>
                </div>
            }
        </Upload>
        }

    </AntDesign.Col>

</Row>



@code
{
    bool loading = false;

    string imageUrl;
    List<UploadFileItem> fileList = new List<UploadFileItem>
    {

    };


    bool BeforeUpload(UploadFileItem file)
    {
        var isJpgOrPng = file.Type == "image/jpeg" || file.Type == "image/png";
        if (!isJpgOrPng)
        {
            _message.Error("You can only upload JPG/PNG file!");
        }
        var isLt2M = file.Size / 1024 / 1024 < 2;
        if (!isLt2M)
        {
            _message.Error("Image must smaller than 2MB!");
        }
        return isJpgOrPng && isLt2M;
    }

    async Task HandleChange(UploadInfo fileinfo)
    {
        loading = fileinfo.File.State == UploadState.Uploading;

        if (fileinfo.File.State == UploadState.Success)
        {
            imageUrl = fileinfo.File.ObjectURL;

        }
        fileList.Where(file => file.State == UploadState.Success && !string.IsNullOrWhiteSpace(file.Response)).ForEach(async file =>
        {
            var result = file.GetResponse<ResponseModel>();
            Property.SetValue(Value, result.url);
            await OnValueChange.InvokeAsync(result.url);
        });
     await   InvokeAsync(StateHasChanged);
    }

    public class ResponseModel
    {
        public string name { get; set; }

        public string status { get; set; }

        public string url { get; set; }

        public string thumbUrl { get; set; }
    }
}
<style>
    .avatar-uploader > .ant-upload {
        width: 128px;
        height: 128px;
    }
</style>